#!/usr/bin/env dotnet-script
#nullable enable
#load "Settings.csx"
#load "Models.csx"

#r "nuget:Scriban, 3.6.0"
using System.IO;
using System.Linq;
using System.Text.Json;
using Scriban;

WriteLine("[1] –ü–∞—Ä—Å–∏–Ω–≥ —á–µ–π–Ω–¥–∂–ª–æ–≥–æ–≤.");
var files = (from file in Settings.ChangelogsFolder.GetFiles()
             where !file.Name.StartsWith('.') && file.Extension == ".json"
             select file).ToList();

List<Changelog> changelogs = new(12);

foreach (var file in files)
{
    try
    {
        changelogs.Add(JsonSerializer.Deserialize<Changelog>(File.ReadAllText(file.FullName), Settings.JsonOptions)
                                      ?? throw new InvalidOperationException($"[1] üö´–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–ø–∞—Ä—Å–∏—Ç—å {file}"));
    }
    catch (JsonException e)
    {
        WriteLine($"[1] üö´–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ñ–∞–π–ª–∞ {file.Name}: {e.Message}");

        return 1;
    }
}

changelogs = Changelog.Merge(changelogs);

if (changelogs.Count == 0)
{
    WriteLine(" ‚îÇ  –ù–µ—Ç –Ω–æ–≤—ã—Ö —á–µ–π–Ω–¥–∂–ª–æ–≥–æ–≤.");
}

List<Changelog> cache = new(0);
WriteLine(" ‚îÇ  –ü–∞—Ä—Å–∏–Ω–≥ –∫—ç—à–∞.");

try
{
    cache = JsonSerializer.Deserialize<List<Changelog>>(File.ReadAllText(Settings.ChangelogsCache.FullName), Settings.JsonOptions)
                           ?? throw new InvalidOperationException($"[1] üö´–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–ø–∞—Ä—Å–∏—Ç—å {Settings.ChangelogsCache}");
}
catch (JsonException e)
{
    WriteLine($"[1] üö´–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∫—ç—à–∞: {e.Message}");

    return 1;
}

cache.AddRange(changelogs);
cache = Changelog.Merge(cache);
cache = cache.OrderByDescending(c => c.Date).ToList();

WriteLine($"[1] ‚úÖ–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {changelogs.Count} —á–µ–π–Ω–¥–∂–ª–æ–≥–æ–≤.");
WriteLine("[2] –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ–π–Ω–¥–∂–ª–æ–≥–æ–≤ –∏ –∫—ç—à–∞.");
bool anyErrors = false;
foreach (var changelog in cache)
{
    if (string.IsNullOrEmpty(changelog.Author))
    {
        anyErrors = true;
        WriteLine($" ‚îÇ  üö´–ò–º—è –∞–≤—Ç–æ—Ä–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º:\n{changelog}");
    }

    if (changelog.Changes.Count == 0)
    {
        anyErrors = true;
        WriteLine($" ‚îÇ  üö´–°–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º:\n{changelog}");
    }

    foreach (var change in changelog.Changes)
    {
        if (string.IsNullOrEmpty(change.Message))
        {
            anyErrors = true;
            WriteLine($" ‚îÇ  üö´–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º:\n{changelog}");
        }
    }
}

if (anyErrors)
{
    WriteLine("[2] üö´–ë—ã–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏.");
    return 1;
}

WriteLine($"[2] –û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");

WriteLine($"[3] –ü–∞—Ä—Å–∏–Ω–≥ —à–∞–±–ª–æ–Ω–∞ –∏–∑ {Settings.ChangelogTemplate.Name}.");
Template template = Template.Parse(File.ReadAllText(Settings.ChangelogTemplate.FullName));
var context = new
{
    GeneratingTime = DateTime.Now,
    Changelogs = cache
};

WriteLine($" ‚îÇ  –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ HTML –≤ {Settings.HtmlChangelog.Name}...");
File.WriteAllText(Settings.HtmlChangelog.FullName, template.Render(context));
WriteLine(" ‚îÇ  ‚úÖHTML —Å–æ—Ö—Ä–∞–Ω–µ–Ω.");

WriteLine($" ‚îÇ  –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫—ç—à–∞ –≤ {Settings.ChangelogsCache.Name}...");
File.WriteAllText(Settings.ChangelogsCache.FullName, JsonSerializer.Serialize(cache, Settings.JsonOptions));
WriteLine(" ‚îÇ  ‚úÖ–ö—ç—à —Å–æ—Ö—Ä–∞–Ω—ë–Ω.");

WriteLine(" ‚îÇ  –£–¥–∞–ª–µ–Ω–∏–µ —á–µ–π–Ω–¥–∂–ª–æ–≥ —Ñ–∞–π–ª–æ–≤...");
files.ForEach(f => f.Delete());
WriteLine("[3] ‚úÖ–ß–µ–π–Ω–¥–∂–ª–æ–≥ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã.");

return 0;
